name: GitHub Actions Security Analysis with zizmor ðŸŒˆ
run-name: "[SecureSDLC Zizmor] Ref:${{ github.ref_name }} Event:${{ github.event_name }}"

on:
  workflow_dispatch: {}
  workflow_call: {}
  pull_request: {}
  # pull_request_target: {} # Gives workflows excessive permissions. Not wanted.
  push: # Used for local testing.
    branches:
      - '**' 

jobs:
  zizmor:
    name: SecureSDLC Zizmor
    continue-on-error: true
    if: ${{ github.actor != 'dependabot[bot]' }}    
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read # only needed for private repos
      actions: read # only needed for private repos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@c7f87aa956e4c323abf06d5dec078e358f6b4d04 # v6.0.0

      - name: Run zizmor
        run: uvx zizmor --format=sarif . > zizmor.sarif 

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/sarif-support-for-code-scanning
      - name: Convert SARIF levels to severities
        run: |
          jq '
          def level_score(level):
            if level == "error" then 3
            elif level == "warning" then 2
            elif level == "note" or level == "none" then 1
            else 0 end;

          def score_to_severity(score):
            if score == 3 then "8.0"
            elif score == 2 then "6.0"
            elif score == 1 then "3.0"
            else "0.0" end;

          # Extract ruleId â†’ max severity score map
          . as $root
          | $root.runs[0].results
            | map({ruleId, score: level_score(.level)})
            | group_by(.ruleId)
            | map({ (.[0].ruleId): (map(.score) | max) })
            | add
            as $severity_map

          # Apply it to the rules section
          | $root
          | .runs[0].tool.driver.rules |=
              map(
                if .id and ($severity_map[.id]? != null) then
                  .properties["security-severity"] = score_to_severity($severity_map[.id])
                else . end
              )
          ' zizmor.sarif > zizmor-severities-updated.sarif

          cat zizmor-severities-updated.sarif

      - name: Convert SARIF tool name
        run: |
          jq '(.runs[].tool.driver.name) = "Zizmor (SecureSDLC)"' zizmor-severities-updated.sarif > zizmor-final.sarif

      - name: Upload Zizmor artifact
        # if: ${{ needs.securesdlc-visibility-check.outputs.visibility != 'public' }}
        uses: actions/upload-artifact@v4
        with:
          name: Zizmor scan results
          path: zizmor-final.sarif 
          retention-days: 5

      # Fails gracefully for private repos when GitHub Advanced Security is not enabled. We can not split dashbaord and PR annotations - be careful about public PRs.
      - name: Publish findings to the dashboard and annotate PRs # allowed for non-public repos and public repos only when not a PR
        # if: ${{ needs.securesdlc-visibility-check.outputs.visibility != 'public' || (needs.securesdlc-visibility-check.outputs.visibility == 'public' && github.event_name != 'pull_request') }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zizmor-final.sarif 
          category: zizmor

